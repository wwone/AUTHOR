This is a short writeup on how data flows through the AUTHOR system. A small amount of development history is included.

Originally, this software system was created to make two output formats: HTML and PDF. The PDF was created directly using
the Adobe PDFBox software package. This is great software, and I use it all the time for PDF manipulation. However,
direct PDF creation and layout is just too difficult. I changed over to Apace FOP instead.

As a result, the release version of the AUTHOR system reads text and creates text.

For PDF output, the system reads input and creates ".fo" files. These files must be combined
and become input to the Apache FOP system. That system can easily create excellent PDF output. 
It does great layout, and is very, very flexible. Note that images must be available
to the FOP program, when it creates the PDF.

PDF output can come in two flavors: interactive and print.

For PDF Print, the default layout is 2-column, 8 1/2 x 11 inch. It is pretty easy to manipulate the FOP
data to create other formats. In print format, there are page numbers, and all cross-references
("see also") are page numbers. All indexes refer to page numbers.

For PDF Interactive, the default layout is 1-column 8 1/2 x 11 inch. It is pretty easy to 
manipulate the FOP data to create other formats. In Interactive format, there are no referrable
page numbers, and all cross-references are clickable links. Indexes are interactive, and stored 
as "bookmarks". Most PDF readers support clickable links, and offer display bookmarks for ease 
of navigation.

For PDF processing, you must install Apache FOP on your computer. I will provide example scripts
that invoke it.

For HTML output, a single HTML file is created for the entire document. As designed, the
layout is dependent on use of certain CSS and Javascript (included). There is an alternative embedded
in the code, that uses "skeleton" CSS layout (no Javascript). It is not difficult to alter
the JSON configuration files to use another HTML layout scheme. The reason for using
these particular layout systems is that they work well on a wide variety of devices, from
computer screens, to tablets, to phones, with a minimum of code. I understand that there
are increasingly prevalent layout systems for web-based document viewing, and look forward
to a time when the output of AUTHOR can create such documents.

The HTML output, along with images, CSS and Javascript, can be packaged into a ZIP file for 
distribution as a "website-in-a-box" format. Such a package can be read by any user on any device
that supports a decent web browser. This method of document distribution is nice because
it does not tie the end reader to any particular viewing software (Kindle, Nook, PDF Reader, etc).

For Kindle output, the pseudo-HTML is created in such a way that the "kindlegen" program
(from Amazon) can make the appropriate output file. Note that certain metadata files
are needed. While AUTHOR creates working versions of these files, they must be hand-edited by 
the person running the "kindlegen" program, and passed to the "kindlegen" program. Note also
that the images must also be located in a place findable by "kindlegen".

Once the AZW3 file has been created, it can be read into the "Calibre" program and
if necessary, manipulated. The simplest transform that can be made with that
program is the creation of the EPUB version of the desired document.

(At one time, I tried to directly create EPUB files. This proved to be
very frustrating, and nothing I tried creating could pass the EPUB syntax tester.)

For "reveal.js" web-based presentations, the program directly creates a single
HTML file. That file expects the presence of the appropriate "reveal.js" support
files. The assumption is that such a presentation is landscape-oriented, and looks
and behaves as if it were a PowerPoint (tm) presentation. The "reveal.js" system
has proved to be excellent, working well on a variety of computer screens, tablets,
and phones.
